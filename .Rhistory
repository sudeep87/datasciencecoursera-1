# add line for theoretical long-run average / expected value
lines(c(1,n),c(7,7),col="orange",lwd=2)
# annotation of final average
text(n,6.75,
paste("last =",round(trial1$cum_mean[n],round(log10(n),0))),
adj=1, col="red")
return(TRUE)
}
plotDiceRolls(1000)
plotDiceRolls <- function(n=30) {
# visualize how cumulative average converges on 7
trial1 <- rollDice(n)
max_cum_mean <- ceiling(max(trial1$cum_mean))
min_cum_mean <- floor(min(trial1$cum_mean))
# plot the results together
plot(trial1$index,trial1$cum_mean,
log="x",
type="l",col="blue",
xlab="n (number of rolls)",
expression=hat(p)[n],
# ylab="Cumulative Average",ylim=c(min_cum_mean,max_cum_mean),
main="Law of Large Numbers\nRoll of 2 Dice")
# add line for theoretical long-run average / expected value
lines(c(1,n),c(7,7),col="orange",lwd=2)
# annotation of final average
text(n,6.75,
paste("last =",round(trial1$cum_mean[n],round(log10(n),0))),
adj=1, col="red")
return(TRUE)
}
plotDiceRolls(1000)
plotDiceRolls <- function(n=30) {
# visualize how cumulative average converges on 7
trial1 <- rollDice(n)
max_cum_mean <- ceiling(max(trial1$cum_mean))
min_cum_mean <- floor(min(trial1$cum_mean))
# plot the results together
plot(trial1$index,trial1$cum_mean,
log="x",
type="l",col="blue",
xlab="n (number of rolls)",
ylab = expression(hat(p)[n]),
# ylab="Cumulative Average",ylim=c(min_cum_mean,max_cum_mean),
main="Law of Large Numbers\nRoll of 2 Dice")
# add line for theoretical long-run average / expected value
lines(c(1,n),c(7,7),col="orange",lwd=2)
# annotation of final average
text(n,6.75,
paste("last =",round(trial1$cum_mean[n],round(log10(n),0))),
adj=1, col="red")
return(TRUE)
}
plotDiceRolls(1000)
plotDiceRolls <- function(n=30) {
# visualize how cumulative average converges on 7
trial1 <- rollDice(n)
max_cum_mean <- ceiling(max(trial1$cum_mean))
min_cum_mean <- floor(min(trial1$cum_mean))
# plot the results together
plot(trial1$index,trial1$cum_mean,
log="x",
type="l",col="blue",
xlab="n (number of rolls)",
ylab = expression(hat(p)[n]),ylim=c(min_cum_mean,max_cum_mean),
# ylab="Cumulative Average",ylim=c(min_cum_mean,max_cum_mean),
main="Law of Large Numbers\nRoll of 2 Dice")
# add line for theoretical long-run average / expected value
lines(c(1,n),c(7,7),col="orange",lwd=2)
# annotation of final average
text(n,6.75,
paste("last =",round(trial1$cum_mean[n],round(log10(n),0))),
adj=1, col="red")
return(TRUE)
}
plotDiceRolls(1000)
plotDiceRolls <- function(n=30) {
# visualize how cumulative average converges on 7
trial1 <- rollDice(n)
max_cum_mean <- ceiling(max(trial1$cum_mean))
min_cum_mean <- floor(min(trial1$cum_mean))
# plot the results together
plot(trial1$index,trial1$cum_mean,
log="x",
type="l",col="blue",
xlab="n (number of rolls)",
ylab="Cumulative Average",ylim=c(min_cum_mean,max_cum_mean),
main="Law of Large Numbers\nRoll of 2 Dice")
# add line for theoretical long-run average / expected value
lines(c(1,n),c(7,7),col="orange",lwd=2)
# annotation of final average
text(n,6.75,
paste("last =",round(trial1$cum_mean[n],round(log10(n),0))),
adj=1, col="red")
return(TRUE)
}
plotDiceRolls(1000)
# LOLN2.R
# function to roll dice and calculate cumulative average roll
tossCoin <- function(n=30) {
# create a vector of index numbers
index <- c(1:n)
# create a vector of outcomes (H/T are coded using 0/1)
outcomes <- c(0,1)
# create a random sample of n flips
flips <- sample(outcomes,n,replace=T)
# now create a cumulative mean vector
cum_mean <- cumsum(flips)/(1:n)
# now combine the index, flips and cum_mean vectors
# into a data frame and return it
return(data.frame(index,flips,cum_mean))
}
plotCoinTosses <- function(n=30) {
# visualize how cumulative average converges on .5 (probability of tails)
trial1 <- tossCoin(n)
max_cum_mean <- ceiling(max(trial1$cum_mean))
min_cum_mean <- floor(min(trial1$cum_mean))
plot(trial1$index,trial1$cum_mean,
log="x",
type="l",col="blue",
xlab="n (number of coin tosses)",
ylab="Cumulative Average",ylim=c(min_cum_mean,max_cum_mean),
main="Law of Large Numbers\nCoin Tosses")
# add line for expected value
lines(c(1,n),c(0.5,0.5),col="orange",lwd=2)
# annotation with last mean
text(n,0.45,
paste("last =",round(trial1$cum_mean[n],round(log10(n),0))),
adj=1, col="red")
return(TRUE)
}
plotCoinTosses(1000)
plotCoinTosses(10000)
flipCoins <- function(num_flips=1000, num_samples=30, sample_size=30) {
# create a vector of outcomes (H/T are coded using 0/1)
outcomes <- c(0,1)
# create a random sample of num_flips flips
prob <- c(0.5,0.5) # can specify un-fair coin here, e.g., c(0.4,0.6)
flips <- sample(outcomes,num_flips,replace=T,prob=prob)
# create vector of sample means
# i.e., take num_samples of sample_size from the population of num_flips
sample_means <- NULL
for (i in 1:num_samples) {
# take a sample
sample <- sample(flips,sample_size,replace=F)
# calculate the mean and add it to vector of means
sample_means <- c(sample_means,mean(sample))
}
# calculate the mean of means (which should converge on population mean),
# and standard error (s.d. of sample means), which -> 0 as sample_size gets larger
mean_sample_means <- mean(sample_means)
std_error <- sqrt(var(sample_means)) / sqrt(sample_size)
# draw histogram with superimposed normal curve
hist(sample_means,
breaks=40,
prob=TRUE,
density=20,
main=paste("Distribution of Sample Means",
"\nCoin Tosses:", num_flips,
"\nSamples:",num_samples,
"\nSample Size:",sample_size),
xlab=paste("Mean =",mean_sample_means,
"\nSE =",std_error)
)
lines(density(sample_means),
col="blue",
lwd=2)
}
flipCoins(1000000,200,100)
flipCoins(1000000,2000,100)
pnorm(-1,mean=0,sd=1)
pnorm(1,mean=0,sd=1)
pnorm(24,mean=21,sd=5)
qnorm(.10,mean=21,sd=5)
load(url("http://bit.ly/dasi_gss_data"))
save(gss,file="gssdata.Rda")
gss_srm <- gss[,c("caseid","year","coninc","natenvir")]
qqplot(gss$coninc)
qqnorm(gss$coninc)
?qqnorm
hist(gss$coninc)
qqnorm(gss$coninc)
hist(gss$coninc)
qqnorm(gss$coninc)
abline(0,1)
qqnorm(gss$coninc)
abline(0,1)
?abline
abline(0,2)
abline(5,2)
qqnorm(gss$coninc)
abline(5,2)
abline(0,1)
?abline
abline(coef=c(0,1))
z.norm<-(gss$coninc-mean(gss$coninc))/sd(gss$coninc) ## standardized data
qqnorm(z.norm) ## drawing the QQplot
z.norm <- (gss$coninc-mean(gss$coninc))/sd(gss$coninc) ## standardized data
z.norm <- scale(gss$coninc,center = TRUE, scale = FALSE) ## standardized data
qq(z.norm) ## drawing the QQplot
abline(0,1) ## drawing a 45-degree reference line
qqnorm(z.norm) ## drawing the QQplot
abline(0,1) ## drawing a 45-degree reference line
qqnorm(z.norm) ## drawing the QQplot
abline(0,1) ## drawing a 45-degree reference line
install.packages(c("boot", "cluster", "Hmisc", "lavaan", "MASS", "Matrix", "nlme", "rpart"))
install.packages(c("boot", "cluster", "MASS", "Matrix", "nlme", "rpart"))
# LOLN.R
# function to roll dice and calculate cumulative average roll
library(ggplot2)
library(scales)
rollDice <- function(n=30) {
# create a vector of index numbers
index <- c(1:n)
# create two vectors (one for each die) with rolls between 1 and 6
outcomes <- c(1,2,3,4,5,6) # sample space
die1 <- sample(outcomes,n,replace=T)
die2 <- sample(outcomes,n,replace=T)
total_dice <- die1 + die2
# now create a cumulative mean vector
cum_mean <- cumsum(total_dice)/(1:n)
# now combine the index, die1, die2, total_dice, and cum_mean vectors
# into a data frame and return it
return(data.frame(index,die1,die2,total_dice,cum_mean))
}
ggplotDiceRolls <- function(n=30) {
# visualize how cumulative average converges on 7
# roll the dice n times and calculate means
trial1 <- rollDice(n)
# plot the results together
p <- ggplot(trial1, aes(x=index,y=cum_mean)) +
geom_line(colour = "blue") +
geom_hline(aes(yintercept=7.0,colour="orange")) +
labs(title = "Law of Large Numbers\nRoll of 2 Dice\n",size=10) +
theme(plot.title = element_text(size=rel(1.5))) +
labs(x = "n (number of rolls)", y = "Cumulative Average") +
scale_x_continuous(trans = "log10",
breaks = trans_breaks("log10",function(x) 10^x),
labels = trans_format("log10",math_format(10^.x))) +
annotate("text",
label=paste("last =",trial1$cum_mean[n]), y=6.75, x=n/2, colour="darkgreen")
return(p)
}
ggplotDiceRolls(10000)
load(url("http://bit.ly/dasi_gss_data"))
qqnorm(gss$coninc)
qqline(gss$coninc)
library(ggplot2)
qplot(coninc, data=gss) +
geom_histogram(colour="black", fill="lightblue") +
theme_bw() +
labs(x = "Inflation-adjusted Income", y = "Frequency")
library(ggplot2)
ggplot(gss,aes(coninc)) +
geom_histogram()
ggplot(gss,aes(coninc)) +
geom_histogram(colour="darkgrey",fill="lightblue")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black",fill="lightblue")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black",fill="lightblue") +
facet_wrap(~ natenvir)
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black",fill="lightblue") +
facet_wrap(~ natenvir) +
theme_bw() +
labs(x = "Inflation-adjusted Income\n(By natenvir)", y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black",fill="lightblue") +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)",
x = "Income",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black",fill="lightblue") +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "Income",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black",fill="lightblue") +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black",fill="lightblue") +
geom_density() +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
library(ggplot2)
qplot(coninc, data=gss) +
geom_histogram(aes(fill = ..count..)) +
theme_bw() +
labs(x = "Inflation-adjusted Income", y = "Frequency")
qplot(coninc, data=gss) +
geom_histogram(colour="black", fill="lightblue") +
theme_bw() +
labs(x = "Inflation-adjusted Income", y = "Frequency")
qplot(coninc, data=gss) +
geom_histogram(aes(fill = ..count..)) +
theme_bw() +
labs(x = "Inflation-adjusted Income", y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black",fill="lightblue") +
geom_density() +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black") +
scale_fill_gradient("Count", low = "green", high = "red") +
geom_density() +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black") +
scale_fill_gradient("Count", low = "green", high = "red") +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram() +
scale_fill_gradient("Count", low = "green", high = "red") +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(aes(fill=..count..)) +
scale_fill_gradient("Count", low = "green", high = "red") +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(aes(fill=..count..)) +
##  scale_fill_gradient("Count", low = "green", high = "red") +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(colour="black",fill="lightblue") +
geom_density() +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
ggplot(gss,aes(coninc)) +
geom_histogram(aes(fill=..count..)) +
facet_wrap(~ natenvir) +
theme_bw() +
labs(title="Inflation-adjusted Income\n(By natenvir)\n",
x = "\nIncome",
y = "Frequency")
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?table
?qqnorm
x = rnorm(1000);
# overlay histogram, empirical density and normal density
p0 = qplot(x, geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
opts(legend.position = c(0.85, 0.85))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
x = rnorm(1000);
# overlay histogram, empirical density and normal density
p0 = qplot(x, geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
opts(legend.position = c(0.85, 0.85))
print(p0)
?boxplot
# Q-Q plot with reference line
qqnorm(gss$coninc,col="darkorange",main="Normal Q-Q Plot for Variable gss$coninc")
qqline(gss$coninc,col="blue",lwd=2)
flipCoins <- function(num_flips=1000, num_samples=30, sample_size=30) {
# create a vector of outcomes (H/T are coded using 0/1)
outcomes <- c(0,1) # sample space
# create a random sample of num_flips flips
prob <- c(0.5,0.5) # can specify un-fair coin here, e.g., c(0.4,0.6)
flips <- sample(outcomes,num_flips,replace=T,prob=prob)
# create vector of sample means
# i.e., take num_samples of sample_size from the population of num_flips
sample_means <- NULL
for (i in 1:num_samples) {
# take a sample
sample <- sample(flips,sample_size,replace=F)
# calculate the mean and add it to vector of means
sample_means <- c(sample_means,mean(sample))
}
# calculate the mean of means (which should converge on population mean),
# and standard error (s.d. of sample means), which -> 0 as sample_size gets larger
mean_sample_means <- mean(sample_means)
std_error <- sqrt(var(sample_means)) / sqrt(sample_size)
# draw histogram with superimposed normal curve
hist(sample_means,
breaks=40,
prob=TRUE,
density=20,
main=paste("Distribution of Sample Means",
"\nCoin Tosses:", num_flips,
"\nSamples:",num_samples,
"\nSample Size:",sample_size),
xlab=paste("Mean =",mean_sample_means,
"\nSE =",std_error)
)
lines(density(sample_means),
col="blue",
lwd=2)
}
flipCoins(1000000,2000,1000)
install.packages(c("foreign", "KernSmooth", "psych", "rpart"))
install.packages(c("boot", "class", "cluster", "evaluate", "foreign", "KernSmooth", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial"))
install.packages("vcd")
library(vcd)
?mosaic
?xtabs
qnorm(.40,mean=50,sd=12)
qnorm(.40,mean=50,sd=10)
qnorm(.40,mean=50,sd=15)
qnorm(.40,mean=50,sd=17.5)
qnorm(.40,mean=50,sd=20)
qnorm(.40,mean=50,sd=25)
qnorm(.40,mean=50,sd=30)
qnorm(.40,mean=50,sd=40)
qnorm(0.5)
qnorm(0.05)
library(psych)
library(ggplot2)
load(url("http://bit.ly/dasi_nc"))
save(nc,file="nc.Rdf")
str(nc)
hist(nc$mage,prob=T)
lines(density(nc$mage),col="blue",lwd=2)
summary(nc$gained)
hist(nc$weight)
qplot(weight, data = nc,
facets=gender~., binwidth = .25)
plot(nc$gained, nc$weight)
abline(lm(nc$weight ~ nc$gained),col="blue",lwd=2)
qplot(gained, weight, data = nc,
geom=c("point","smooth"),
method="lm")
# weight gained
hist(nc$gained,prob=T)
lines(density(nc$gained,na.rm=T),col="blue",lwd=2)
summary(nc$gained)
describe(nc$gained)
boxplot(nc$gained,horizontal=T)
# remove NA's from gained (27)
gained_clean <- na.omit(nc$gained)
summary(gained_clean)
describe(gained_clean)
n <- length(gained_clean)
# bootstrapping
boot_means <- rep(NA,100)
for (i in 1:100) {
boot_sample <- sample(gained_clean,n,replace=T) # with replacement!
boot_means[i] <- mean(boot_sample)
}
hist(boot_means,breaks=30,prob=T)
boot_means <- rep(NA,10000)
for (i in 1:10000) {
boot_sample <- sample(gained_clean,n,replace=T) # with replacement!
boot_means[i] <- mean(boot_sample)
}
hist(boot_means,breaks=30,prob=T)
lines(density(boot_means),col="blue",lwd=2)
qplot(boot_means,binwidth=.25)
hist(boot_means,breaks=30,prob=T)
lines(density(boot_means),col="blue",lwd=2)
boot_means <- rep(NA,10000)
for (i in 1:10000) {
boot_sample <- sample(gained_clean,n,replace=T) # with replacement!
boot_means[i] <- mean(boot_sample)
}
hist(boot_means,breaks=30,prob=T)
lines(density(boot_means),col="blue",lwd=2)
quantile(boot_means,c(.05,.95))
quantile(boot_means,c(.025,.975))
# custom inference function
source("http://bit.ly/dasi_inference")
inference(nc$gained,type="ci",method="simulation",conflevel=0.9,est="mean",boot_method="perc")
inference(nc$gained,type="ci",method="simulation",conflevel=0.95,est="mean",boot_method="perc")
inference(nc$gained,type="ci",method="simulation",conflevel=0.95,est="mean",boot_method="se")
inference(nc$gained,type="ci",method="simulation",conflevel=0.95,est="median",boot_method="se")
install.packages(c("car", "evaluate", "Hmisc", "lattice", "markdown", "MASS", "psych", "reshape", "reshape2", "scales"))
install.packages(c("ggplot2", "knitr"))
setwd("~/Sites/datasciencecoursera")
